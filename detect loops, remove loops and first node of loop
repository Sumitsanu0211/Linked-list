#include <iostream>
#include <map>
using namespace std;
class Node{
    public:
    int data;
    Node* next;
  
  Node(int val){
      this-> data = val;
      this-> next = NULL;
  }
};
// inserting at head
void insertAthead(Node* &head, int d){
    Node* temp = new Node(d);
   /* if(head==NULL){
        head=temp;
        return;
    } 
    */
    temp-> next = head;
    head = temp;
}
 
 void insertAttail(Node* &tail, int d){
     Node* temp = new Node(d);
     if(tail==NULL){
        tail=temp;
        return;
     }
     
     tail-> next = temp;
     tail=tail-> next;
 }
 
 bool detectloop(Node* head){
     if(head==NULL){
         return 0;
     }
     map<Node*, bool> visited;
     Node* temp = head;
     while(temp!=NULL){
         if(visited[temp]==true){
            return 1;
         }
         visited[temp] = true;
         temp=temp-> next;
        
     }
     return 0;
 }
 
 Node* firstNodeofloop(Node* head){
     if(head==NULL){
         return NULL;
     }
      map<Node*, bool> visited;
     Node* temp = head;
     while(temp!=NULL){
         if(visited[temp]==true){
            return temp;
         }
         visited[temp] = true;
         temp=temp-> next;
        
     }
     
  
 }
void removeloop(Node* head){
  if(head==NULL){
    return;
  }
  Node* startingNode = firstNodeofloop(head);
  Node* temp = startingNode;
   while(temp-> next != startingNode){
     temp = temp-> next;
   }
  temp-> next =NULL;
}
 
void print(Node* head){
    Node* temp = head;
    while(temp!=NULL){
        cout<<temp-> data<<" ";
        temp = temp-> next;
        
    }
    cout<<endl;
}

int main(){
   
   
    
  Node* node1 = new Node(25);
  Node* head = node1;
  Node* tail = node1;
   insertAthead(head,10);
   insertAthead(head, 20);
    insertAthead(head, 30);
    insertAthead(head, 50);
    insertAthead(head,66);
   insertAttail(tail,79);
   insertAttail(tail,20);
   cout<<"Head->"<<head-> data<<endl;
   cout<<"tail->"<<tail-> data<<endl;
    
    tail-> next = head-> next-> next;

    //print(head);
    if(detectloop(head)){
        cout<<"loop is present"<<endl;
    } else{
        cout<<"loop is not present"<<endl;
    }
    
    cout<< "firt node of loop is"<<" "<<firstNodeofloop(head)<<endl;
  removeloop(head);
  print(head);
   
    
    return 0;
    
}
